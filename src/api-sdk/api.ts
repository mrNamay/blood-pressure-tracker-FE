/// <reference path="./custom.d.ts" />
// tslint:disable
/**
 * API Documentation
 * API documentation for the application
 *
 * OpenAPI spec version: 1.0.0
 * 
 *
 * NOTE: This file is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the file manually.
 */

import * as url from "url";
import * as isomorphicFetch from "isomorphic-fetch";
import { Configuration } from "./configuration";

const BASE_PATH = "http://localhost:3000".replace(/\/+$/, "");

/**
 *
 * @export
 */
export const COLLECTION_FORMATS = {
    csv: ",",
    ssv: " ",
    tsv: "\t",
    pipes: "|",
};

/**
 *
 * @export
 * @interface FetchAPI
 */
export interface FetchAPI {
    (url: string, init?: any): Promise<Response>;
}

/**
 *
 * @export
 * @interface FetchArgs
 */
export interface FetchArgs {
    url: string;
    options: any;
}

/**
 *
 * @export
 * @class BaseAPI
 */
export class BaseAPI {
    protected configuration: Configuration;

    constructor(configuration?: Configuration, protected basePath: string = BASE_PATH, protected fetch: FetchAPI = isomorphicFetch) {
        if (configuration) {
            this.configuration = configuration;
            this.basePath = configuration.basePath || this.basePath;
        }
    }
}

/**
 *
 * @export
 * @class RequiredError
 * @extends {Error}
 */
export class RequiredError extends Error {
    name = "RequiredError"
    constructor(public field: string, msg?: string) {
        super(msg);
    }
}

/**
 * 
 * @export
 * @interface ApiBloodpressureBody
 */
export interface ApiBloodpressureBody {
    /**
     * 
     * @type {string}
     * @memberof ApiBloodpressureBody
     */
    userId: string;
    /**
     * 
     * @type {SystolicReading}
     * @memberof ApiBloodpressureBody
     */
    systolic: SystolicReading;
    /**
     * 
     * @type {DiastolicReading}
     * @memberof ApiBloodpressureBody
     */
    diastolic: DiastolicReading;
    /**
     * 
     * @type {Pulse}
     * @memberof ApiBloodpressureBody
     */
    pulse: Pulse;
    /**
     * 
     * @type {ReadingNotes}
     * @memberof ApiBloodpressureBody
     */
    notes?: ReadingNotes;
}
/**
 * 
 * @export
 * @interface AuthLoginBody
 */
export interface AuthLoginBody {
    /**
     * 
     * @type {Email}
     * @memberof AuthLoginBody
     */
    email: Email;
    /**
     * 
     * @type {Password}
     * @memberof AuthLoginBody
     */
    password: Password;
}
/**
 * 
 * @export
 * @interface AuthRegisterBody
 */
export interface AuthRegisterBody {
    /**
     * 
     * @type {string}
     * @memberof AuthRegisterBody
     */
    name: string;
    /**
     * 
     * @type {Email}
     * @memberof AuthRegisterBody
     */
    email: Email;
    /**
     * 
     * @type {Password}
     * @memberof AuthRegisterBody
     */
    password: Password;
}
/**
 * 
 * @export
 * @interface BloodPressureReading
 */
export interface BloodPressureReading {
    /**
     * Unique identifier for the blood pressure reading
     * @type {string}
     * @memberof BloodPressureReading
     */
    id: string;
    /**
     * 
     * @type {UserId}
     * @memberof BloodPressureReading
     */
    userId: UserId;
    /**
     * 
     * @type {SystolicReading}
     * @memberof BloodPressureReading
     */
    systolic: SystolicReading;
    /**
     * 
     * @type {DiastolicReading}
     * @memberof BloodPressureReading
     */
    diastolic: DiastolicReading;
    /**
     * 
     * @type {Pulse}
     * @memberof BloodPressureReading
     */
    pulse: Pulse;
    /**
     * Timestamp of the reading
     * @type {Date}
     * @memberof BloodPressureReading
     */
    timestamp: Date;
    /**
     * 
     * @type {ReadingNotes}
     * @memberof BloodPressureReading
     */
    notes?: ReadingNotes;
}
/**
 * Diastolic blood pressure reading
 * @export
 */
export type DiastolicReading = number
/**
 * Should be a valid email address.
 * @export
 */
export type Email = string
/**
 * 
 * @export
 * @interface InlineResponse200
 */
export interface InlineResponse200 {
    /**
     * 
     * @type {string}
     * @memberof InlineResponse200
     */
    token?: string;
    /**
     * 
     * @type {UserId}
     * @memberof InlineResponse200
     */
    userId?: UserId;
}
/**
 * 
 * @export
 * @interface InlineResponse2001
 */
export interface InlineResponse2001 {
    /**
     * 
     * @type {string}
     * @memberof InlineResponse2001
     */
    message?: string;
    /**
     * 
     * @type {Array<BloodPressureReading>}
     * @memberof InlineResponse2001
     */
    readings?: Array<BloodPressureReading>;
}
/**
 * 
 * @export
 * @interface InlineResponse2002
 */
export interface InlineResponse2002 {
    /**
     * 
     * @type {string}
     * @memberof InlineResponse2002
     */
    message?: string;
    /**
     * 
     * @type {BloodPressureReading}
     * @memberof InlineResponse2002
     */
    updatedReading?: BloodPressureReading;
}
/**
 * 
 * @export
 * @interface InlineResponse2003
 */
export interface InlineResponse2003 {
    /**
     * 
     * @type {string}
     * @memberof InlineResponse2003
     */
    message?: string;
    /**
     * 
     * @type {BloodPressureReading}
     * @memberof InlineResponse2003
     */
    deletedReading?: BloodPressureReading;
}
/**
 * 
 * @export
 * @interface InlineResponse2004
 */
export interface InlineResponse2004 {
    /**
     * 
     * @type {string}
     * @memberof InlineResponse2004
     */
    message?: string;
    /**
     * 
     * @type {ReadingsAverage}
     * @memberof InlineResponse2004
     */
    averages?: ReadingsAverage;
}
/**
 * 
 * @export
 * @interface InlineResponse201
 */
export interface InlineResponse201 {
    /**
     * 
     * @type {string}
     * @memberof InlineResponse201
     */
    message?: string;
    /**
     * 
     * @type {User}
     * @memberof InlineResponse201
     */
    user?: User;
}
/**
 * 
 * @export
 * @interface InlineResponse2011
 */
export interface InlineResponse2011 {
    /**
     * 
     * @type {string}
     * @memberof InlineResponse2011
     */
    message?: string;
    /**
     * 
     * @type {BloodPressureReading}
     * @memberof InlineResponse2011
     */
    reading?: BloodPressureReading;
}
/**
 * 
 * @export
 * @interface ModelError
 */
export interface ModelError {
    /**
     * Error message
     * @type {string}
     * @memberof ModelError
     */
    message: string;
}
/**
 * The name of the user
 * @export
 */
export type Name = string
/**
 * Should be a valid password.
 * @export
 */
export type Password = string
/**
 * Pulse rate
 * @export
 */
export type Pulse = number
/**
 * Additional notes for the reading
 * @export
 */
export type ReadingNotes = string
/**
 * 
 * @export
 * @interface ReadingReadingIdBody
 */
export interface ReadingReadingIdBody {
    /**
     * 
     * @type {SystolicReading}
     * @memberof ReadingReadingIdBody
     */
    systolic?: SystolicReading;
    /**
     * 
     * @type {DiastolicReading}
     * @memberof ReadingReadingIdBody
     */
    diastolic?: DiastolicReading;
    /**
     * 
     * @type {Pulse}
     * @memberof ReadingReadingIdBody
     */
    pulse?: Pulse;
    /**
     * 
     * @type {ReadingNotes}
     * @memberof ReadingReadingIdBody
     */
    notes?: ReadingNotes;
}
/**
 * 
 * @export
 * @interface ReadingsAverage
 */
export interface ReadingsAverage {
    /**
     * 
     * @type {number}
     * @memberof ReadingsAverage
     */
    systolic: number;
    /**
     * 
     * @type {number}
     * @memberof ReadingsAverage
     */
    diastolic: number;
    /**
     * 
     * @type {number}
     * @memberof ReadingsAverage
     */
    pulse: number;
}
/**
 * Systolic blood pressure reading
 * @export
 */
export type SystolicReading = number
/**
 * 
 * @export
 * @interface User
 */
export interface User {
    /**
     * 
     * @type {UserId}
     * @memberof User
     */
    id: UserId;
    /**
     * 
     * @type {Name}
     * @memberof User
     */
    name: Name;
    /**
     * 
     * @type {Email}
     * @memberof User
     */
    email: Email;
}
/**
 * The ID of the user
 * @export
 */
export type UserId = string
/**
 * AuthenticationApi - fetch parameter creator
 * @export
 */
export const AuthenticationApiFetchParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Login a user and get a JWT token
         * @param {AuthLoginBody} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAuthLoginPost(body: AuthLoginBody, options: any = {}): FetchArgs {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling apiAuthLoginPost.');
            }
            const localVarPath = `/api/auth/login`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            localVarUrlObj.search = null;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = (<any>"AuthLoginBody" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body =  needsSerialization ? JSON.stringify(body || {}) : (body || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get the profile of the authenticated user
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAuthProfileGet(options: any = {}): FetchArgs {
            const localVarPath = `/api/auth/profile`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            localVarUrlObj.search = null;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Register a new user
         * @param {AuthRegisterBody} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAuthRegisterPost(body: AuthRegisterBody, options: any = {}): FetchArgs {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling apiAuthRegisterPost.');
            }
            const localVarPath = `/api/auth/register`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            localVarUrlObj.search = null;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = (<any>"AuthRegisterBody" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body =  needsSerialization ? JSON.stringify(body || {}) : (body || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * AuthenticationApi - functional programming interface
 * @export
 */
export const AuthenticationApiFp = function(configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Login a user and get a JWT token
         * @param {AuthLoginBody} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAuthLoginPost(body: AuthLoginBody, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<InlineResponse200> {
            const localVarFetchArgs = AuthenticationApiFetchParamCreator(configuration).apiAuthLoginPost(body, options);
            return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @summary Get the profile of the authenticated user
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAuthProfileGet(options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<User> {
            const localVarFetchArgs = AuthenticationApiFetchParamCreator(configuration).apiAuthProfileGet(options);
            return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @summary Register a new user
         * @param {AuthRegisterBody} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAuthRegisterPost(body: AuthRegisterBody, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<InlineResponse201> {
            const localVarFetchArgs = AuthenticationApiFetchParamCreator(configuration).apiAuthRegisterPost(body, options);
            return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
    }
};

/**
 * AuthenticationApi - factory interface
 * @export
 */
export const AuthenticationApiFactory = function (configuration?: Configuration, fetch?: FetchAPI, basePath?: string) {
    return {
        /**
         * 
         * @summary Login a user and get a JWT token
         * @param {AuthLoginBody} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAuthLoginPost(body: AuthLoginBody, options?: any) {
            return AuthenticationApiFp(configuration).apiAuthLoginPost(body, options)(fetch, basePath);
        },
        /**
         * 
         * @summary Get the profile of the authenticated user
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAuthProfileGet(options?: any) {
            return AuthenticationApiFp(configuration).apiAuthProfileGet(options)(fetch, basePath);
        },
        /**
         * 
         * @summary Register a new user
         * @param {AuthRegisterBody} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAuthRegisterPost(body: AuthRegisterBody, options?: any) {
            return AuthenticationApiFp(configuration).apiAuthRegisterPost(body, options)(fetch, basePath);
        },
    };
};

/**
 * AuthenticationApi - object-oriented interface
 * @export
 * @class AuthenticationApi
 * @extends {BaseAPI}
 */
export class AuthenticationApi extends BaseAPI {
    /**
     * 
     * @summary Login a user and get a JWT token
     * @param {AuthLoginBody} body 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthenticationApi
     */
    public apiAuthLoginPost(body: AuthLoginBody, options?: any) {
        return AuthenticationApiFp(this.configuration).apiAuthLoginPost(body, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @summary Get the profile of the authenticated user
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthenticationApi
     */
    public apiAuthProfileGet(options?: any) {
        return AuthenticationApiFp(this.configuration).apiAuthProfileGet(options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @summary Register a new user
     * @param {AuthRegisterBody} body 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthenticationApi
     */
    public apiAuthRegisterPost(body: AuthRegisterBody, options?: any) {
        return AuthenticationApiFp(this.configuration).apiAuthRegisterPost(body, options)(this.fetch, this.basePath);
    }

}
/**
 * BloodPressureApi - fetch parameter creator
 * @export
 */
export const BloodPressureApiFetchParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Add a new blood pressure reading
         * @param {ApiBloodpressureBody} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiBloodPressurePost(body: ApiBloodpressureBody, options: any = {}): FetchArgs {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling apiBloodPressurePost.');
            }
            const localVarPath = `/api/blood-pressure`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required

            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            localVarUrlObj.search = null;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = (<any>"ApiBloodpressureBody" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body =  needsSerialization ? JSON.stringify(body || {}) : (body || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Delete a blood pressure reading
         * @param {string} readingId ID of the reading
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiBloodPressureReadingReadingIdDelete(readingId: string, options: any = {}): FetchArgs {
            // verify required parameter 'readingId' is not null or undefined
            if (readingId === null || readingId === undefined) {
                throw new RequiredError('readingId','Required parameter readingId was null or undefined when calling apiBloodPressureReadingReadingIdDelete.');
            }
            const localVarPath = `/api/blood-pressure/reading/{readingId}`
                .replace(`{${"readingId"}}`, encodeURIComponent(String(readingId)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'DELETE' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            localVarUrlObj.search = null;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get a specific blood pressure reading by ID
         * @param {string} readingId ID of the reading
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiBloodPressureReadingReadingIdGet(readingId: string, options: any = {}): FetchArgs {
            // verify required parameter 'readingId' is not null or undefined
            if (readingId === null || readingId === undefined) {
                throw new RequiredError('readingId','Required parameter readingId was null or undefined when calling apiBloodPressureReadingReadingIdGet.');
            }
            const localVarPath = `/api/blood-pressure/reading/{readingId}`
                .replace(`{${"readingId"}}`, encodeURIComponent(String(readingId)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            localVarUrlObj.search = null;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Update a blood pressure reading
         * @param {ReadingReadingIdBody} body 
         * @param {string} readingId ID of the reading
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiBloodPressureReadingReadingIdPut(body: ReadingReadingIdBody, readingId: string, options: any = {}): FetchArgs {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling apiBloodPressureReadingReadingIdPut.');
            }
            // verify required parameter 'readingId' is not null or undefined
            if (readingId === null || readingId === undefined) {
                throw new RequiredError('readingId','Required parameter readingId was null or undefined when calling apiBloodPressureReadingReadingIdPut.');
            }
            const localVarPath = `/api/blood-pressure/reading/{readingId}`
                .replace(`{${"readingId"}}`, encodeURIComponent(String(readingId)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'PUT' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required

            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            localVarUrlObj.search = null;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = (<any>"ReadingReadingIdBody" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body =  needsSerialization ? JSON.stringify(body || {}) : (body || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get average blood pressure readings for a user
         * @param {string} userId ID of the user
         * @param {string} [startDate] Start date for the average calculation
         * @param {string} [endDate] End date for the average calculation
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiBloodPressureUserIdAveragesGet(userId: string, startDate?: string, endDate?: string, options: any = {}): FetchArgs {
            // verify required parameter 'userId' is not null or undefined
            if (userId === null || userId === undefined) {
                throw new RequiredError('userId','Required parameter userId was null or undefined when calling apiBloodPressureUserIdAveragesGet.');
            }
            const localVarPath = `/api/blood-pressure/{userId}/averages`
                .replace(`{${"userId"}}`, encodeURIComponent(String(userId)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required

            if (startDate !== undefined) {
                localVarQueryParameter['startDate'] = (startDate as any).toISOString();
            }

            if (endDate !== undefined) {
                localVarQueryParameter['endDate'] = (endDate as any).toISOString();
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            localVarUrlObj.search = null;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get all blood pressure readings for a user
         * @param {string} userId ID of the user
         * @param {string} [startDate] Start date for the blood pressure reading.
         * @param {string} [endDate] End date for the blood pressure reading.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiBloodPressureUserIdGet(userId: string, startDate?: string, endDate?: string, options: any = {}): FetchArgs {
            // verify required parameter 'userId' is not null or undefined
            if (userId === null || userId === undefined) {
                throw new RequiredError('userId','Required parameter userId was null or undefined when calling apiBloodPressureUserIdGet.');
            }
            const localVarPath = `/api/blood-pressure/{userId}`
                .replace(`{${"userId"}}`, encodeURIComponent(String(userId)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required

            if (startDate !== undefined) {
                localVarQueryParameter['startDate'] = (startDate as any).toISOString();
            }

            if (endDate !== undefined) {
                localVarQueryParameter['endDate'] = (endDate as any).toISOString();
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            localVarUrlObj.search = null;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * BloodPressureApi - functional programming interface
 * @export
 */
export const BloodPressureApiFp = function(configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Add a new blood pressure reading
         * @param {ApiBloodpressureBody} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiBloodPressurePost(body: ApiBloodpressureBody, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<InlineResponse2011> {
            const localVarFetchArgs = BloodPressureApiFetchParamCreator(configuration).apiBloodPressurePost(body, options);
            return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @summary Delete a blood pressure reading
         * @param {string} readingId ID of the reading
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiBloodPressureReadingReadingIdDelete(readingId: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<InlineResponse2003> {
            const localVarFetchArgs = BloodPressureApiFetchParamCreator(configuration).apiBloodPressureReadingReadingIdDelete(readingId, options);
            return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @summary Get a specific blood pressure reading by ID
         * @param {string} readingId ID of the reading
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiBloodPressureReadingReadingIdGet(readingId: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<InlineResponse2011> {
            const localVarFetchArgs = BloodPressureApiFetchParamCreator(configuration).apiBloodPressureReadingReadingIdGet(readingId, options);
            return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @summary Update a blood pressure reading
         * @param {ReadingReadingIdBody} body 
         * @param {string} readingId ID of the reading
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiBloodPressureReadingReadingIdPut(body: ReadingReadingIdBody, readingId: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<InlineResponse2002> {
            const localVarFetchArgs = BloodPressureApiFetchParamCreator(configuration).apiBloodPressureReadingReadingIdPut(body, readingId, options);
            return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @summary Get average blood pressure readings for a user
         * @param {string} userId ID of the user
         * @param {string} [startDate] Start date for the average calculation
         * @param {string} [endDate] End date for the average calculation
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiBloodPressureUserIdAveragesGet(userId: string, startDate?: string, endDate?: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<InlineResponse2004> {
            const localVarFetchArgs = BloodPressureApiFetchParamCreator(configuration).apiBloodPressureUserIdAveragesGet(userId, startDate, endDate, options);
            return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @summary Get all blood pressure readings for a user
         * @param {string} userId ID of the user
         * @param {string} [startDate] Start date for the blood pressure reading.
         * @param {string} [endDate] End date for the blood pressure reading.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiBloodPressureUserIdGet(userId: string, startDate?: string, endDate?: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<InlineResponse2001> {
            const localVarFetchArgs = BloodPressureApiFetchParamCreator(configuration).apiBloodPressureUserIdGet(userId, startDate, endDate, options);
            return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
    }
};

/**
 * BloodPressureApi - factory interface
 * @export
 */
export const BloodPressureApiFactory = function (configuration?: Configuration, fetch?: FetchAPI, basePath?: string) {
    return {
        /**
         * 
         * @summary Add a new blood pressure reading
         * @param {ApiBloodpressureBody} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiBloodPressurePost(body: ApiBloodpressureBody, options?: any) {
            return BloodPressureApiFp(configuration).apiBloodPressurePost(body, options)(fetch, basePath);
        },
        /**
         * 
         * @summary Delete a blood pressure reading
         * @param {string} readingId ID of the reading
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiBloodPressureReadingReadingIdDelete(readingId: string, options?: any) {
            return BloodPressureApiFp(configuration).apiBloodPressureReadingReadingIdDelete(readingId, options)(fetch, basePath);
        },
        /**
         * 
         * @summary Get a specific blood pressure reading by ID
         * @param {string} readingId ID of the reading
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiBloodPressureReadingReadingIdGet(readingId: string, options?: any) {
            return BloodPressureApiFp(configuration).apiBloodPressureReadingReadingIdGet(readingId, options)(fetch, basePath);
        },
        /**
         * 
         * @summary Update a blood pressure reading
         * @param {ReadingReadingIdBody} body 
         * @param {string} readingId ID of the reading
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiBloodPressureReadingReadingIdPut(body: ReadingReadingIdBody, readingId: string, options?: any) {
            return BloodPressureApiFp(configuration).apiBloodPressureReadingReadingIdPut(body, readingId, options)(fetch, basePath);
        },
        /**
         * 
         * @summary Get average blood pressure readings for a user
         * @param {string} userId ID of the user
         * @param {string} [startDate] Start date for the average calculation
         * @param {string} [endDate] End date for the average calculation
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiBloodPressureUserIdAveragesGet(userId: string, startDate?: string, endDate?: string, options?: any) {
            return BloodPressureApiFp(configuration).apiBloodPressureUserIdAveragesGet(userId, startDate, endDate, options)(fetch, basePath);
        },
        /**
         * 
         * @summary Get all blood pressure readings for a user
         * @param {string} userId ID of the user
         * @param {string} [startDate] Start date for the blood pressure reading.
         * @param {string} [endDate] End date for the blood pressure reading.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiBloodPressureUserIdGet(userId: string, startDate?: string, endDate?: string, options?: any) {
            return BloodPressureApiFp(configuration).apiBloodPressureUserIdGet(userId, startDate, endDate, options)(fetch, basePath);
        },
    };
};

/**
 * BloodPressureApi - object-oriented interface
 * @export
 * @class BloodPressureApi
 * @extends {BaseAPI}
 */
export class BloodPressureApi extends BaseAPI {
    /**
     * 
     * @summary Add a new blood pressure reading
     * @param {ApiBloodpressureBody} body 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BloodPressureApi
     */
    public apiBloodPressurePost(body: ApiBloodpressureBody, options?: any) {
        return BloodPressureApiFp(this.configuration).apiBloodPressurePost(body, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @summary Delete a blood pressure reading
     * @param {string} readingId ID of the reading
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BloodPressureApi
     */
    public apiBloodPressureReadingReadingIdDelete(readingId: string, options?: any) {
        return BloodPressureApiFp(this.configuration).apiBloodPressureReadingReadingIdDelete(readingId, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @summary Get a specific blood pressure reading by ID
     * @param {string} readingId ID of the reading
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BloodPressureApi
     */
    public apiBloodPressureReadingReadingIdGet(readingId: string, options?: any) {
        return BloodPressureApiFp(this.configuration).apiBloodPressureReadingReadingIdGet(readingId, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @summary Update a blood pressure reading
     * @param {ReadingReadingIdBody} body 
     * @param {string} readingId ID of the reading
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BloodPressureApi
     */
    public apiBloodPressureReadingReadingIdPut(body: ReadingReadingIdBody, readingId: string, options?: any) {
        return BloodPressureApiFp(this.configuration).apiBloodPressureReadingReadingIdPut(body, readingId, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @summary Get average blood pressure readings for a user
     * @param {string} userId ID of the user
     * @param {string} [startDate] Start date for the average calculation
     * @param {string} [endDate] End date for the average calculation
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BloodPressureApi
     */
    public apiBloodPressureUserIdAveragesGet(userId: string, startDate?: string, endDate?: string, options?: any) {
        return BloodPressureApiFp(this.configuration).apiBloodPressureUserIdAveragesGet(userId, startDate, endDate, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @summary Get all blood pressure readings for a user
     * @param {string} userId ID of the user
     * @param {string} [startDate] Start date for the blood pressure reading.
     * @param {string} [endDate] End date for the blood pressure reading.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BloodPressureApi
     */
    public apiBloodPressureUserIdGet(userId: string, startDate?: string, endDate?: string, options?: any) {
        return BloodPressureApiFp(this.configuration).apiBloodPressureUserIdGet(userId, startDate, endDate, options)(this.fetch, this.basePath);
    }

}
